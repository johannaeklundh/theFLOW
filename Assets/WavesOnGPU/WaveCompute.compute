#pragma kernel CSMain

RWTexture2D<float4> NState;
RWTexture2D<float4> Nm1State;
RWTexture2D<float4> Np1State;
RWTexture2D<float4> obstaclesTex;
int2 resolution;
float3 effect;
float dispersion;


[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // Get the current coordinates as floats
    //float x = float(id.x);
    //float y = float(id.y);

    float ns_ij = NState[id.xy].x; //red channel
    float nm1_ij = Nm1State[id.xy].x;
    float ns_ip1j = NState[id.xy + uint2(1, 0)].x;
    float ns_ijp1 = NState[id.xy + uint2(0, 1)].x;
    float ns_im1j = NState[id.xy - uint2(1, 0)].x;
    float ns_ijm1 = NState[id.xy - uint2(0, 1)].x;
    float newWaveHeight = ns_ij * 2 - nm1_ij + 0.25 * (ns_ip1j + ns_im1j + ns_ijp1 + ns_ijm1 - 4 * ns_ij);
    newWaveHeight = newWaveHeight * dispersion;
    
    //testar smoothing
    newWaveHeight = lerp(ns_ij, newWaveHeight, 0.8);
    newWaveHeight = lerp(nm1_ij, newWaveHeight, 0.8);
    newWaveHeight = lerp(ns_ip1j, newWaveHeight, 0.8);
    //newWaveHeight = lerp(ns_ijp1, newWaveHeight, 0.8);
    //newWaveHeight = lerp(ns_im1j, newWaveHeight, 0.8);
    //newWaveHeight = lerp(ns_ijm1, newWaveHeight, 0.8);

    
    // Compare floats with floats
    if (id.x == floor(effect.x) && id.y == floor(effect.y))
    {
        newWaveHeight = effect.z;
    }
    
    if (obstaclesTex[id.xy].x == 1)
    {
        newWaveHeight = 0;
    }
    
    if (obstaclesTex[id.xy].y == 1)
    {
        newWaveHeight = -0.5;
    }

    Np1State[id.xy] = float4(newWaveHeight, newWaveHeight, newWaveHeight, 1); //new color RGBA
}
